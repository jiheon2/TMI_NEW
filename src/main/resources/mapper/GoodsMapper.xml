<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- JAVA와 연결할 Mapper 파일 설정 -->
<mapper namespace="kopo.poly.persistance.mapper.IGoodsMapper">

    <!-- 상품 목록 조회 쿼리 -->
    <select id="getGoodsList" parameterType="GoodsDTO" resultType="GoodsDTO">
        SELECT G.GOODS_NAME, G.PRICE, G.GOODS_TYPE, G.GOODS_NUMBER, G.GOODS_IMAGE, G.TRADER_ID, G.SHOP_NUMBER,
        S.SHOP_NAME, S.SHOP_DESCRIPTION, S.MARKET_NUMBER,
        (SELECT COUNT(*) FROM GOODS WHERE SHOP_NUMBER = #{shopNumber}) AS GOODS_COUNT
        FROM GOODS G
        JOIN SHOP S ON G.SHOP_NUMBER = S.SHOP_NUMBER
        WHERE 1=1
        <if test="traderId neq null and traderId neq ''">
            AND G.TRADER_ID = #{traderId}
        </if>
        <if test="shopNumber neq null and shopNumber neq ''">
            AND G.SHOP_NUMBER = #{shopNumber}
        </if>
        ORDER BY G.GOODS_NUMBER DESC
    </select>

    <!-- 상품 정보 조회 쿼리 -->
    <select id="getGoodsInfo" parameterType="GoodsDTO" resultType="GoodsDTO">
        SELECT G.GOODS_NAME, G.PRICE,G.TRADER_ID, G.GOODS_TYPE, G.GOODS_DESCRIPTION, G.GOODS_IMAGE, G.GOODS_NUMBER, ROUND(AVG(R.SCORE), 1) as avgScore, COUNT(R.SCORE) as countScore
        FROM GOODS G
                 LEFT JOIN REVIEW R ON G.GOODS_NUMBER = R.GOODS_NUMBER
        WHERE G.GOODS_NUMBER = #{goodsNumber}
        GROUP BY G.GOODS_NAME, G.PRICE, G.GOODS_TYPE, G.GOODS_DESCRIPTION, G.GOODS_IMAGE, G.GOODS_NUMBER;
    </select>

    <!-- 상품 정보 수정 쿼리 -->
    <update id="updateGoods" parameterType="GoodsDTO">
        UPDATE GOODS
        SET GOODS_NAME  = #{goodsName},
            PRICE = #{price},
            GOODS_DESCRIPTION   = #{goodsDescription},
            GOODS_TYPE  = #{goodsType},
            GOODS_IMAGE = #{goodsImage}
        WHERE TRADER_ID = #{traderId}
          AND GOODS_NUMBER = #{goodsNumber}
    </update>

    <!-- 상품 등록 쿼리 -->
    <insert id="insertGoods" parameterType="GoodsDTO">
        INSERT INTO GOODS (GOODS_NAME, GOODS_TYPE, PRICE, GOODS_DESCRIPTION, GOODS_NUMBER, GOODS_IMAGE, TRADER_ID)
        VALUES (#{goodsName}, #{goodsType}, #{price}, #{goodsDescription}, (SELECT IFNULL(MAX(A.GOODS_NUMBER), 0) + 1 FROM GOODS A), #{goodsImage}, #{traderId})
    </insert>

    <!-- 등록 상품 삭제 쿼리 -->
    <delete id="goodsInfoDelete" parameterType="GoodsDTO">
        DELETE
        FROM GOODS
        WHERE GOODS_NUMBER = #{goodsNumber}
        AND TRADER_ID = #{traderId}
    </delete>
</mapper>